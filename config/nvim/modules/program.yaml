- repo: editorconfig/editorconfig-vim

- repo: Yggdroot/indentLine
  on_event: BufReadPre
  hook_source: |
    let g:indentLine_enabled = 1
    let g:indentLine_char='â”†'
    let g:indentLine_fileTypeExclude = ['defx', 'denite','startify','tagbar','vista_kind','vista','coc-explorer']
    let g:indentLine_concealcursor = 'niv'
    let g:indentLine_showFirstIndentLevel =1

- repo: tyru/caw.vim
  depends: context_filetype.vim
  on_map: { nx: <Plug> }

- repo: liuchengxu/vista.vim
  on_cmd: [Vista, Vista!, Vista!!]
  hook_source: |
    let g:vista#renderer#enable_icon = 1
    let g:vista_disable_statusline = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_echo_cursor_strategy = 'floating_win'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ 'yaml': 'coc',
      \ 'typescript': 'coc',
      \ 'typescriptreact': 'coc',
      \ }

- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_source: |
    let g:quickrun_config = {
      \   "_" : {
        \       "outputter" : "message",
        \   },
        \}
    let g:quickrun_no_default_key_mappings = 1

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [BufReadPost, BufWritePost]
  hook_source: |
    let g:gutentags_cache_dir = $DATA_PATH . '/tags'
    let g:gutentags_project_root = ['.root', '.git', '.svn', '.hg', '.project','go.mod','/usr/local']
    let g:gutentags_generate_on_write = 0
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
    let g:gutentags_ctags_extra_args = ['--output-format=e-ctags']
    let g:gutentags_ctags_exclude = ['*.json', '*.js', '*.ts', '*.jsx', '*.css', '*.less', '*.sass', '*.go', '*.dart', 'node_modules', 'dist', 'vendor']

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html,css,javascript,javascriptreact,vue,typescript,typescriptreact ]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Vigemus/iron.nvim
  if: has('nvim')
  on_cmd: [IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: |
    lua << EOF
      local iron = require('iron')

      iron.core.add_repl_definitions {
        go = {
          gore = {
            command = {"gore"}
          }
        }
      }
      iron.core.set_config {
        preferred = {
          go = "gore",
          python = "ipython",
          javascript = "node",
        },
        repl_open_cmd = "vertical split"
      }
    EOF

- repo: mattn/vim-sonictemplate
  on_cmd: Template
  on_ft: [go,typescript,javascript,vim,rust,markdown]
  hook_source: |
    let g:sonictemplate_postfix_key = '<Tab>'
    let g:sonictemplate_vim_template_dir = $VIM_PATH . '/template'
